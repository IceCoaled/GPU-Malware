/*
Author: Blake Dietze
Github: IceCoaled
Date: 7/27/2024

Description: applies a simple XOR decryption to a buffer of shellcode,
it outputs the decrypted shellcode to a different buffer.
This shader is designed to be used with D3D11 Compute Shader.
We are using 1 Z thread, this is for backwards compatibility with cs_4_0,
as well as we arent modifying an image that has depth.


To Compile the Compute Shader:
1. Open the DecryptShader.hlsl file in Visual Studio
2. Right Click the File and Select Compile Shader


This Code is Provided As Is, and I am not responsible for any damage caused by this code.
It is your responsibility to use this code for educational purposes only.

This may not be the best code, but it is a POC of how to use D3D11 to create something special.
*/



//define shellcode size
#define SHELLCODE_SIZE 0x0000110

//define xor key
#define XOR_KEY 0x00000041

//define raw input/output buffer
//this type of buffer is quite what you would think
//you cant actual read a single byte from it
ByteAddressBuffer rawInput : register(t0);
RWByteAddressBuffer rawOutput : register(u0);



//function to read input
//Input is a 4 byte value
//So we read 4 bytes from the input buffer
//We then split the 4 bytes into 4 1 byte values
//We then return the 4 separate values
uint4 ReadInput(uint x, uint y)
{
    uint offset = (x + y * SHELLCODE_SIZE);
    uint4 value;
    uint tempValue = rawInput.Load(offset);
    
    value.x = (tempValue & 0x000000FF);
    value.y = ((tempValue & 0x0000FF00) >> 8);
    value.z = ((tempValue & 0x00FF0000) >> 16);
    value.w = ((tempValue & 0xFF000000) >> 24);
    
    return value; 
}



//function to write output
//We combine the 4 separate values into a single 4 byte value
void WriteOutput(uint x, uint y, uint4 value)
{
    uint offset = (x + y * SHELLCODE_SIZE);
    uint tempValue = 0;
    
    tempValue |= value.x;
    tempValue |= value.y << 8;
    tempValue |= value.z << 16;
    tempValue |= value.w << 24;
    
    rawOutput.Store(offset, tempValue);
}



[numthreads(34, 8, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
   //read input
    uint4 value = ReadInput(threadID.x, threadID.y);
    
    //decrypt
    value.x = value.x ^ XOR_KEY;
    value.y = value.y ^ XOR_KEY;
    value.z = value.z ^ XOR_KEY;
    value.w = value.w ^ XOR_KEY;
    
    //write output
    WriteOutput(threadID.x, threadID.y, value);
}