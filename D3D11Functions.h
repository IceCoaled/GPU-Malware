#pragma once
#include <d3d11.h>
#include <d3dcompiler.h>
#pragma comment(lib,"d3d11.lib")
#pragma comment(lib,"d3dcompiler")


//define check cpu access
#define CHECK_CPU_ACCESS


//Our D3D11 Struct
typedef struct _D3D11_DATA
{
	//D3D11 Data for general use
	ID3D11Device* device;
	ID3D11DeviceContext* context;
	
	//feature level of the device, used to check if compute shaders are supported
	D3D_FEATURE_LEVEL featureLevel;
	
	//buffer, buffer description, and mapped resource for the CPU accessable buffer
	D3D11_BUFFER_DESC cpuBufferDesc;
	D3D11_MAPPED_SUBRESOURCE mappedResource;
	ID3D11Buffer* cpuBuffer;
	
	//buffer and buffer description for the GPU only buffer
	D3D11_BUFFER_DESC gpuBufferDesc;
	ID3D11Buffer* gpuBuffer;
	
	//sub resource data for copying data directly to the GPU Buffer on creation
	D3D11_SUBRESOURCE_DATA subResourceData;
	
	//shader resource view description for GPU Buffer
	D3D11_SHADER_RESOURCE_VIEW_DESC rvDesc;
	
	//shader resource view for GPU Buffer
	ID3D11ShaderResourceView* computeShaderRV;
	
	//unordered access view description for CPU Buffer
	D3D11_UNORDERED_ACCESS_VIEW_DESC uavDesc;
	
	//unordered access view for CPU Buffer
	ID3D11UnorderedAccessView* computeShaderUAV;
	
	//compute shader and blob for the compute shader creation
	ID3D11ComputeShader* computeShader;
	ID3DBlob* computeShaderBlob;
} D3D11_DATA, * PD3D11_DATA;



HRESULT InitD3D11(PD3D11_DATA data);

HRESULT CompileShaderFromFile(__inout PD3D11_DATA data, __in LPCWSTR filename, __in LPCSTR entrypoint, __out ID3DBlob** blob);

HRESULT DecryptViaComputeShader(__inout PD3D11_DATA data);

HRESULT AccessDataFromGpu(__inout PD3D11_DATA data, __out PVOID* allocatedMem);

BOOLEAN CheckForCpuAccess(__inout PD3D11_DATA data);

VOID D3D11Cleanup(__inout PD3D11_DATA data);